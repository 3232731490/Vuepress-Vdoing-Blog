(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{469:function(s,t,e){"use strict";e.r(t);var a=e(9),v=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" Session")]),s._v(" "),e("h3",{attrs:{id:"session概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session概述"}},[s._v("#")]),s._v(" Session概述")]),s._v(" "),e("ol",[e("li",[s._v("Session接口是hibernate操作数据库的最主要的接口，它"),e("strong",[s._v("提供了最基本的保存，更新，删除和加载java对象的方法")])]),s._v(" "),e("li",[e("strong",[s._v("Session具有一个缓存，位于缓存中的对象称为持久化对象，他和数据库中的相关记录对应")])]),s._v(" "),e("li",[s._v("站在持久化的角度，Hibernate把对象分为4种状态：持久化状态，临时状态，游离状态，删除状态。Session的特定方法能使对象从一个状态转换到另一个状态。")])]),s._v(" "),e("h3",{attrs:{id:"session缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session缓存"}},[s._v("#")]),s._v(" Session缓存")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://atts.w3cschool.cn/attachments/image/wk/hibernate/hibernate_cache.jpg",alt:"缓存"}})]),s._v(" "),e("ol",[e("li",[s._v("Session接口的实现中包含一系列JAVA集合，这些JAVA集合构成了Session缓存，只要Session实例没有结束生命周期，且没有清理缓存，则存放在它缓存中的对象也不会结束生命周期。")]),s._v(" "),e("li",[s._v("Session缓存可减少Hibernate应用程序访问数据库频率")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdn.net/20180824195400486?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xzeDIwMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:"一级缓存"}})]),s._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[e("code",[s._v("flush")]),s._v(": 在提交事务之前会执行，为了是数据库表中的记录和Session缓存中的记录状态保持一致，可能会发送对应的SQL语句，但不会提交事务")]),s._v(" "),e("ol",[e("li",[s._v("在执行HQL 或 QBC查询时，会先执行flush()操作，以得到数据库中最新的记录")]),s._v(" "),e("li",[s._v("若记录的"),e("strong",[s._v("ID")]),s._v(" 是由底层数据库使用自增的方式所生成的，则在调用save()方法后，就会立即发出INSERT语句，因为"),e("strong",[s._v("save")]),s._v("方法后，必须保证对象的ID是存在的")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("reflush")]),s._v("：会强制发送"),e("code",[s._v("SELECT")]),s._v("语句，以使Session缓存中对象的状态和数据库表中的对应记录保持一致")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("clear")]),s._v(": 清理缓存")])])]),s._v(" "),e("h3",{attrs:{id:"session核心方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session核心方法"}},[s._v("#")]),s._v(" Session核心方法")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("有关于对象的状态转换")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdn.net/20180907085421962?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjQ1MjE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:"状态转变图"}})])]),s._v(" "),e("li",[e("p",[e("code",[s._v("save")]),s._v("方法")]),s._v(" "),e("ol",[e("li",[s._v("使一个临时对象转换为持久化对象")]),s._v(" "),e("li",[s._v("为对象分配ID")]),s._v(" "),e("li",[s._v("在"),e("code",[s._v("flush")]),s._v("缓存时会发送一条"),e("code",[s._v("Insert")]),s._v("语句")]),s._v(" "),e("li",[s._v("在"),e("code",[s._v("save")]),s._v("方法之前的id是无效的")]),s._v(" "),e("li",[s._v("持久化对象的ID是不能被修改的")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("Persist")]),s._v("方法")]),s._v(" "),e("ol",[e("li",[s._v("也会执行"),e("code",[s._v("INSERT")]),s._v("操作")]),s._v(" "),e("li",[s._v("如果在"),e("code",[s._v("persist")]),s._v("操作之前，对象已经有ID了，则不会指向"),e("code",[s._v("INSERT")]),s._v("方法，而是会抛出异常")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("get")]),s._v("|"),e("code",[s._v("load")]),s._v("方法")]),s._v(" "),e("ol",[e("li",[s._v("执行"),e("code",[s._v("get")]),s._v("方法，会立即加载对象")]),s._v(" "),e("li",[s._v("执行"),e("code",[s._v("load")]),s._v("方法，若不适用该对象，则不会立即执行查询操作，而是返回一个代理对象")]),s._v(" "),e("li",[e("code",[s._v("get")]),s._v("是立即检索  "),e("code",[s._v("load")]),s._v("是延迟检索")]),s._v(" "),e("li",[s._v("若数据表中没有对应记录，Session也没有被关闭，get返回null，load在需要使用该对象时则抛出异常")]),s._v(" "),e("li",[e("code",[s._v("load")]),s._v("方法可能会抛出懒加载异常: 在需要初始化代理对象之前已经关闭了Session")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("update")]),s._v(" 方法")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("若更新一个持久化对象，不要显式调用"),e("code",[s._v("update")]),s._v("方法，因为在调用commit方法时，会先执行flush方法")])]),s._v(" "),e("li",[e("p",[s._v("更新一个游离对象需要显式调用update方法，可以将游离对象变为持久化对象")])]),s._v(" "),e("li",[e("p",[s._v("注意")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("无论要更新的游离对象是否和数据库表中数据一致，都会发送update语句")]),s._v(" "),e("blockquote",[e("p",[s._v("如何避免这种情况？")]),s._v(" "),e("blockquote",[e("p",[s._v("在.hbm.xml中的class节点中设置属性 "),e("code",[s._v("select-before-upadte")]),s._v("为true，在更新前查询是否和数据库中数据一致，不过通常不设置这个属性")])])])]),s._v(" "),e("li",[e("p",[s._v("若数据库表中没有对应记录，但调用了update方法，则抛出异常")])]),s._v(" "),e("li",[e("p",[s._v("当update关联一个游离对象时，如果Session缓存中已经存在相同OID的持久化对象，会抛出异常，因为在同一个Session中不允许有两个对象的OID相同")])])])])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("saveOrUpdate")]),s._v("方法")]),s._v(" "),e("ol",[e("li",[s._v("同时包含了save和update方法\n"),e("ul",[e("li",[s._v("游离对象执行update")]),s._v(" "),e("li",[s._v("临时对象执行sava")])])])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("merge")]),s._v("方法")]),s._v(" "),e("ol",[e("li",[s._v("较复杂，待...")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("delete")]),s._v("方法")]),s._v(" "),e("ol",[e("li",[s._v("只要OID和数据库表中一条记录对应就会执行"),e("code",[s._v("delete")]),s._v("操作")]),s._v(" "),e("li",[s._v("若OID在数据表中没有对应记录则抛出异常")]),s._v(" "),e("li",[s._v("执行操作后不会立马删除，而是会等到flush后再删除数据，此时可以通过再主配置文件中配置")])])])]),s._v(" "),e("p",[e("code",[s._v("hibernate.use_identifier_rollback")]),s._v("为true，使删除对象后，将其OID置为null")]),s._v(" "),e("ol",{attrs:{start:"9"}},[e("li",[e("code",[s._v("evict")]),s._v("方法\n"),e("ol",[e("li",[s._v("从session缓存中把指定的持久化对象移除")])])])]),s._v(" "),e("h3",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("Hibernate调用存储过程")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("由于HIbernate没有直接操作存储过程的API，所以需要使用"),e("code",[s._v("Connection")]),s._v("来间接操作存储过程，获取"),e("code",[s._v("Connection")]),s._v("的方法是"),e("code",[s._v("doWork")]),s._v("，需要传入"),e("code",[s._v("Work")]),s._v("，这是一个接口，需要重写一个"),e("code",[s._v("execute")]),s._v("方法，在这个方法里调用存储过程")]),s._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[s._v("session"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("doWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Work")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Connection")]),s._v(" connection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SQLException")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CallableStatement")]),s._v(" cs "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" connection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("prepareCall")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{call callback()}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])])])])]),s._v(" "),e("li",[e("p",[s._v("Hibernate与触发器协同工作")]),s._v(" "),e("ul",[e("li",[s._v("在执行update时，如果数据库中有关于update的触发器，不管数据是否变化，都会一直重复调用，解决办法已在上方update第三点的第一条说明")]),s._v(" "),e("li",[s._v("在读取数据库中信息时，可能会出现session缓存与数据库信息不一致的情况，这时可以使用reflush解决，还需要改变数据库的隔离级别，在查询之前同步一下数据库中的最新数据。")])])])])])}),[],!1,null,null,null);t.default=v.exports}}]);