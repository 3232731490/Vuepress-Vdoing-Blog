(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{466:function(n,s,r){"use strict";r.r(s);var t=r(9),a=Object(t.a)({},(function(){var n=this,s=n.$createElement,r=n._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h2",{attrs:{id:"题目链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题目链接"}},[n._v("#")]),n._v(" 题目链接")]),n._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/path-sum-iii/",target:"_blank",rel:"noopener noreferrer"}},[n._v("437:路径总和Ⅲ🎁"),r("OutboundLink")],1)]),n._v(" "),r("h2",{attrs:{id:"题目描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[n._v("#")]),n._v(" 题目描述")]),n._v(" "),r("blockquote",[r("p",[n._v("给定一个二叉树的根节点 root ，和一个整数 "),r("code",[n._v("targetSum")]),n._v(" ，求该二叉树里节点值之和等于 "),r("code",[n._v("targetSum")]),n._v(" 的 路径 的数目。"),r("br"),n._v(" "),r("strong",[n._v("路径")]),n._v(" 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。"),r("br")]),n._v(" "),r("p",[n._v("示例 1："),r("br"),n._v(" "),r("img",{attrs:{src:"https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg",alt:"示例一"}}),r("br"),n._v(" "),r("br"),n._v("\n输入：root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8"),r("br"),n._v("\n输出：3"),r("br"),n._v("\n解释：和等于 8 的路径有 3 条，如图所示。"),r("br"),n._v("\n示例 2："),r("br"),n._v(" "),r("br"),n._v("\n输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22"),r("br"),n._v("\n输出：3"),r("br"),n._v(" "),r("br"),n._v("\n提示:"),r("br"),n._v("\n二叉树的节点个数的范围是 [0,1000]"),r("br"),n._v("\n-10^9 <= Node.val <= 10^9 "),r("br"),n._v("\n-1000 <= targetSum <= 1000 "),r("br")])]),n._v(" "),r("h2",{attrs:{id:"解法一-双dfs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解法一-双dfs"}},[n._v("#")]),n._v(" 解法一 双DFS")]),n._v(" "),r("div",{staticClass:"language-c++ line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    using ll = long long;\n    int pathSum(TreeNode* root, int targetSum) {  // 递归从当前节点出发有多少条符合要求的路径\n        int ans=0;\n        int t=0;\n        function<void(TreeNode*,ll)> dfs2 = [&](TreeNode* cur,ll temp){\n            if(cur==nullptr)\n                return;\n            if(cur->val==temp)\n                t++;\n            dfs2(cur->left,temp-cur->val);\n            dfs2(cur->right,temp-cur->val);\n        };\n        function<void(TreeNode*)> dfs1 = [&](TreeNode* cur){  // 递归二叉树的每一个节点作为起始节点\n            if(cur==nullptr)\n                return;\n            dfs2(cur->left,targetSum-cur->val);\n            dfs2(cur->right,targetSum-cur->val);\n            if(cur->val==targetSum)\n                t++;\n            ans += t;\n            t=0;\n            dfs1(cur->left);\n            dfs1(cur->right);\n        };\n        dfs1(root);\n        return ans;\n    }\n};\n")])]),n._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[n._v("1")]),r("br"),r("span",{staticClass:"line-number"},[n._v("2")]),r("br"),r("span",{staticClass:"line-number"},[n._v("3")]),r("br"),r("span",{staticClass:"line-number"},[n._v("4")]),r("br"),r("span",{staticClass:"line-number"},[n._v("5")]),r("br"),r("span",{staticClass:"line-number"},[n._v("6")]),r("br"),r("span",{staticClass:"line-number"},[n._v("7")]),r("br"),r("span",{staticClass:"line-number"},[n._v("8")]),r("br"),r("span",{staticClass:"line-number"},[n._v("9")]),r("br"),r("span",{staticClass:"line-number"},[n._v("10")]),r("br"),r("span",{staticClass:"line-number"},[n._v("11")]),r("br"),r("span",{staticClass:"line-number"},[n._v("12")]),r("br"),r("span",{staticClass:"line-number"},[n._v("13")]),r("br"),r("span",{staticClass:"line-number"},[n._v("14")]),r("br"),r("span",{staticClass:"line-number"},[n._v("15")]),r("br"),r("span",{staticClass:"line-number"},[n._v("16")]),r("br"),r("span",{staticClass:"line-number"},[n._v("17")]),r("br"),r("span",{staticClass:"line-number"},[n._v("18")]),r("br"),r("span",{staticClass:"line-number"},[n._v("19")]),r("br"),r("span",{staticClass:"line-number"},[n._v("20")]),r("br"),r("span",{staticClass:"line-number"},[n._v("21")]),r("br"),r("span",{staticClass:"line-number"},[n._v("22")]),r("br"),r("span",{staticClass:"line-number"},[n._v("23")]),r("br"),r("span",{staticClass:"line-number"},[n._v("24")]),r("br"),r("span",{staticClass:"line-number"},[n._v("25")]),r("br"),r("span",{staticClass:"line-number"},[n._v("26")]),r("br"),r("span",{staticClass:"line-number"},[n._v("27")]),r("br"),r("span",{staticClass:"line-number"},[n._v("28")]),r("br"),r("span",{staticClass:"line-number"},[n._v("29")]),r("br"),r("span",{staticClass:"line-number"},[n._v("30")]),r("br"),r("span",{staticClass:"line-number"},[n._v("31")]),r("br"),r("span",{staticClass:"line-number"},[n._v("32")]),r("br"),r("span",{staticClass:"line-number"},[n._v("33")]),r("br"),r("span",{staticClass:"line-number"},[n._v("34")]),r("br"),r("span",{staticClass:"line-number"},[n._v("35")]),r("br"),r("span",{staticClass:"line-number"},[n._v("36")]),r("br"),r("span",{staticClass:"line-number"},[n._v("37")]),r("br"),r("span",{staticClass:"line-number"},[n._v("38")]),r("br"),r("span",{staticClass:"line-number"},[n._v("39")]),r("br"),r("span",{staticClass:"line-number"},[n._v("40")]),r("br"),r("span",{staticClass:"line-number"},[n._v("41")]),r("br")])]),r("blockquote",[r("p",[n._v("执行用时："),r("strong",[n._v("84 ms")]),n._v(", 在所有 C++ 提交中击败了"),r("code",[n._v("5.31%")]),n._v("的用户"),r("br"),n._v("\n内存消耗："),r("strong",[n._v("15.5 MB")]),n._v(", 在所有 C++ 提交中击败了"),r("code",[n._v("48.15%")]),n._v("的用户")])]),n._v(" "),r("h2",{attrs:{id:"解法二-前缀和"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解法二-前缀和"}},[n._v("#")]),n._v(" 解法二 前缀和")]),n._v(" "),r("div",{staticClass:"language-c++ line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("class Solution {\npublic:\n    using ll = long long;\n    unordered_map<ll,int> hash;\n    int pathSum(TreeNode* root, int targetSum) {\n        int ans=0;\n        hash[0]=1;  // 开始空路径时的路径数为1\n        function<void(TreeNode*,int)> dfs = [&](TreeNode* cur,ll temp){\n            if(cur==nullptr)\n                return;\n            ll curr = cur->val+temp;  // 将当前节点的值加入到前缀和中\n            if(hash.find(curr-targetSum)!=hash.end()){  // 判断前方路径中是否存在值为curr-targetSum的子路径\n                ans+=hash[curr-targetSum];  // 如果有则答案加上子路径的条数\n            }\n            hash[curr]++; // 将当前节点加入到前缀和开始下一次递归\n            dfs(cur->left,curr);\n            dfs(cur->right,curr);\n            hash[curr]--; // 将当前节点退回\n        };\n        dfs(root,0);\n        return ans;\n    }\n};\n")])]),n._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[n._v("1")]),r("br"),r("span",{staticClass:"line-number"},[n._v("2")]),r("br"),r("span",{staticClass:"line-number"},[n._v("3")]),r("br"),r("span",{staticClass:"line-number"},[n._v("4")]),r("br"),r("span",{staticClass:"line-number"},[n._v("5")]),r("br"),r("span",{staticClass:"line-number"},[n._v("6")]),r("br"),r("span",{staticClass:"line-number"},[n._v("7")]),r("br"),r("span",{staticClass:"line-number"},[n._v("8")]),r("br"),r("span",{staticClass:"line-number"},[n._v("9")]),r("br"),r("span",{staticClass:"line-number"},[n._v("10")]),r("br"),r("span",{staticClass:"line-number"},[n._v("11")]),r("br"),r("span",{staticClass:"line-number"},[n._v("12")]),r("br"),r("span",{staticClass:"line-number"},[n._v("13")]),r("br"),r("span",{staticClass:"line-number"},[n._v("14")]),r("br"),r("span",{staticClass:"line-number"},[n._v("15")]),r("br"),r("span",{staticClass:"line-number"},[n._v("16")]),r("br"),r("span",{staticClass:"line-number"},[n._v("17")]),r("br"),r("span",{staticClass:"line-number"},[n._v("18")]),r("br"),r("span",{staticClass:"line-number"},[n._v("19")]),r("br"),r("span",{staticClass:"line-number"},[n._v("20")]),r("br"),r("span",{staticClass:"line-number"},[n._v("21")]),r("br"),r("span",{staticClass:"line-number"},[n._v("22")]),r("br"),r("span",{staticClass:"line-number"},[n._v("23")]),r("br")])]),r("blockquote",[r("p",[n._v("执行用时："),r("strong",[n._v("12 ms")]),n._v(", 在所有 C++ 提交中击败了"),r("code",[n._v("93.60%")]),n._v("的用户"),r("br"),n._v("\n内存消耗："),r("strong",[n._v("18.8 MB")]),n._v(", 在所有 C++ 提交中击败了"),r("code",[n._v("23.38%")]),n._v("的用户")])]),n._v(" "),r("h2",{attrs:{id:"本题点评"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本题点评"}},[n._v("#")]),n._v(" 本题点评")]),n._v(" "),r("blockquote",[r("p",[n._v("感觉难度并不大，但是就是差那么一点想出来"),r("br"),n._v("\n思路是别人给的，代码自己写的，我好菜🤦‍♂️..."),r("br"),n._v("\n就权当时最近刷题懈怠的原因👩‍🦼"),r("br"),n._v("\n没关系，继续加油，今天也是元气满满的一天🤴🏽🚛"),r("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);